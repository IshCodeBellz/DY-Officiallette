name: CI

on:
  push:
    branches: [main, fix/tests-stability/metrics-health]
  pull_request:
    branches: [main]

permissions:
  contents: read
  # (Optional) add security-events write if later integrating code scanning

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      CI: true
      NODE_ENV: test
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/test_db"
      NEXTAUTH_SECRET: "test-secret-for-ci"
      NEXTAUTH_URL: "http://localhost:3000"
      EMAIL_FROM: "test@example.com"
      RESEND_API_KEY: "fake-key-for-ci"
      STRIPE_SECRET_KEY: "sk_test_fake_key_for_ci"
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: "pk_test_fake_key_for_ci"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Create test environment file
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env.local
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
          echo "EMAIL_FROM=test@example.com" >> .env.local
          echo "RESEND_API_KEY=fake-key-for-ci" >> .env.local
          echo "STRIPE_SECRET_KEY=sk_test_fake_key_for_ci" >> .env.local
          echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_fake_key_for_ci" >> .env.local
          echo "NODE_ENV=test" >> .env.local
          echo "CI=true" >> .env.local

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Prisma Migrate (PostgreSQL)
        run: |
          echo "Attempting to apply migrations..."
          echo "Current DATABASE_URL: $DATABASE_URL"
          
          # Try migrate deploy first
          if npx prisma migrate deploy; then
            echo "Migration deploy successful"
          else
            echo "Deploy failed, trying to create database schema..."
            npx prisma db push --skip-generate --force-reset --accept-data-loss
          fi
          
          # Verify schema is created
          psql -h localhost -U postgres -d test_db -c "\dt" || echo "Could not list tables"

      - name: Seed (optional)
        run: npm run prisma:seed || echo "Seed script optional â€“ continuing"

      - name: Debug Database Connection
        run: |
          echo "DATABASE_URL from env: $DATABASE_URL"
          cat .env.local || echo "No .env.local file"
          psql -h localhost -U postgres -d test_db -c "SELECT version();" || echo "Direct psql connection failed"

      - name: Test Prisma Connection
        run: |
          echo "Testing Prisma connection..."
          npx prisma db execute --stdin <<< "SELECT 1 as test;" || echo "Prisma connection test failed"
          
          # Verify key tables exist
          echo "Checking if tables exist..."
          psql -h localhost -U postgres -d test_db -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';" | head -20

      - name: Run Tests
        run: |
          echo "Starting tests with environment:"
          echo "DATABASE_URL: $DATABASE_URL"
          echo "NODE_ENV: $NODE_ENV"
          echo "CI: $CI"
          npm test

      - name: Build
        run: npm run build

      - name: Upload test results (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-or-raw-jest
          path: |
            jest-results.json
            coverage
          if-no-files-found: ignore
